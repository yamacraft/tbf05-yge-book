={my-rules} 独りでプロダクトを作るときのルール

//lead{
本章ではこれまでの経験を踏まえた上で、筆者がプロダクト開発において基本としているルールを紹介します。
//}

== はじめに

前章に書いた経験を踏まえ、本章では設計より前の段階である「プロダクトを作るときのルール」を紹介します。

あくまでも筆者自身の経験を基礎として書いているので、ほかの方が同様に適切なルールになるとは限らない場合があります。

== 開発フロー、タスク管理はちゃんとやる

たとえ自分しかソースを触らないからといって、最初の段階から好きなようにブランチを生やしたり、タスクを適当な場所で管理すると、特にリリース後の振り返り（場合によっては障害発生時の原因の特定）が困難になってしまいます。
後者のタスクにいたっては、それによって実装漏れといった不具合すら発生しかねません。

利用しているソースコード管理サービス（GitHub、GitLab、Bitbucketなど）のissueでもよいので、（むしろ適当なものを選ぶより適切）これらでちゃんと管理する癖をつけるようにしましょう。

=== GitHubならissueやPull Requestのテンプレートを付属させておく

issueやPull Requestは自分ひとりだけのリポジトリの場合、適当に書いてしまいがちです。
ですがこの2つはあとあとの作業内容を見直す可能性もあるため、最低限必要な情報は書いておくにこしたことはありません。

幸いにしてGitHubにはissueとPull Requestにあらかじめテンプレートを作成できる機能がついているため@<fn>{my-rules-github-template-release}、早い段階で整備しておきましょう。

//footnote[my-rules-github-template-release][https://blog.github.com/2016-02-17-issue-and-pull-request-templates/]

==== issue、Pull Requestテンプレートサンプル

テンプレートのサンプルです。
あまり形式にこだわりすぎると逆に書きづらくなってしまうので、これぐらいの内容で十分です。

//list[github-template-issue][.github/ISSUE_TEMPLATE.md][md]{
## 概要 (必須)
-

## Links

-
//}

//list[github-template-pr][.github/PULL_REQUEST_TEMPLATE.md][md]{
## 関連Issue
- close #ISSUE_NUMBER

## 概要 (必須)
-

## Links
-
//}

=== タスク管理にはなにを使うべきか

このプロダクトが業務でやっているものであり、あなたが中心となって利用するツールの変更改革をするつもりでないのなら、社内で利用しているタスク管理ツールを遵守すべきです。
そうでないなら、適当なタスク管理ツールの利用は混乱を招く元となります。

プライベートの場合や、自由にツールを使える権限があるのなら話は別です。基本的には自身が利用しやすいもので、後日各タスクの作成日や終了日が確認できるものを使うとよいでしょう。

そういう点で、issueはログも残るし、各変更の記録も見える化されていて、かつタグやカテゴリ分けもできるので積極的に利用すべきです。
もしプロダクトのリポジトリが複数存在する場合は、ZenHub@<fn>{my-rules-zenhub-url}を使ってひとまとめのBoardsを用意すると、各リポジトリのissueをまとめて見れるので便利です。
ただしZenHubはチーム利用すると有料になってしまうので、業務で利用しようと検討している場合は注意してください。

サーバサイド開発メンバーやプロデューサーなどにもタスクを見てもらう必要がある場合は、（無料でやりたいなら）Trello@<fn>{my-rules-trello-url}もお勧めです。ZenHubのBoardsもTrelloもカンバン形式で表示しているため、残タスクや進行中のタスクが分かりやすく可視化されるので筆者のお気に入りです。

//image[my-rules-zenhub][ZenHubのBoards画面][scale=1.00]{
//}

//footnote[my-rules-zenhub-url][https://www.zenhub.com/]

//footnote[my-rules-trello-url][https://trello.com/]

== ある程度「コア」ができあがるまではGitHub Flowで進める

個人的にはGitHub Flowは成熟したプロダクト以外では採用すべきでないと考えています。
というのも、

 * CIで即座にテストやデプロイが「高速」に走る、結果も即座に通知される
 * デプロイ時に問題が発生した場合、速やかにロールバックが行える

といった、人の手以外での品質管理がしっかり整っているからこそ、あのブランチ量で済んでいると考えているからです。
ですので、基本的にはGit-flowによる開発を採用しています。

ただ、Git-flowはブランチの数が多くなってしまうため、プロダクト初期の初期は「やりすぎ」な印象があります。
これでも複数人で同時にプロダクトを触る場合は必要と思うこともありますが、いまプロダクトを作っているのはあなた一人です。
ある程度CIが回るようになるまでは、マスタブランチに直接Pull Requestを送る形のフローで進めてよいと思います。
ただしその代わり、CIは早期に構築してしまいましょう。

== 初期の段階で自動化をしっかり作っておく

上の流れに続きますが、Circle CIなどのCIツールを使った自動デプロイやテストに関しては、たとえ時間がかかっても最初にしっかり構築をしておくべきです。
リリース後は保守や改修といった作業が増えるため、思った以上に後から追加するといった余裕はありませんし、なにより途中からでは自動化しづらいプロダクトを作ってしまっている場合も多くあります。

先にローカル上のJenkinsでCIができるような環境をDockerで構築し、あとはDockerがたたけるCIサービスやオンプレやクラウドサーバ移行する、というのもありかと思います。

== 使える外部ツールはとことん使う

特に運用や管理においてあらゆる機能を実装する際に、すべて自身でシステムを作るのは時間がかかりすぎるし、保守で手が回らなくなります。
本当に必要な部分だけを自身で構築し、それ以外は外部サービスで補うべきです。
なにより外部サービスの方がよっぽど品質が良いものもあるでしょう。

たいていは有料プランでないと使えなかったりしますが、アルバイトひとり雇うほどのコストでもありませんし、システムそのものの保守も考えなくて済むのは大きな強みです。

=== 絶対に個人アカウントでアカウント作成はしないこと

自身のアカウントで、外部サービスのアカウントを作成することは絶対にやめましょう。
必ず専用のアカウントを別で用意して、そこからアカウントを発行すべきです。

これはその昔、筆者がE社で働いていたころの話です。
ある年、組織編成後のチームでキックオフと言う名の飲み会が開かれました。

明日からみんな頑張るぞー！といった締めでその会はお開きになり、翌日出社すると、その時キックオフにいたプロダクトリーダーが車に轢かれて緊急搬送。
重傷で現在面会謝絶中という連絡が飛び込んできました。

あの時強く痛感しました。
本人の意志に関係なく、人は突然「いなくなる」こともありえるのです。

=== 自分との関わりを薄くすることで、プロダクトの重荷を回避する

もしあなたが、いま関わっているプロダクトは自分と共依存して生きるべきだというエゴがないのであれば話は別ですが、そうでないのなら「いついなくなっても問題のないように」考えてプロダクトを構築するようにしましょう。

おかげで逆に「自分が常に側にいないとプロダクトが回らない…」という精神的な重荷になる要素も減ります。
これは地味に開発を続けていく上でストレスになりがちな要素です。
コードもプロダクトも同じです、なるべく疎結合に作っていきましょう。

== 「確実に動く」という環境をひとつに絞る

主にAndroidの話ですが、Webにも共通する話だと思います。

そもそもエンジニアの数すら増やせない状況にある組織で、満足な検証端末が用意されているケースはまれです。
プライベート開発ならなおさらでしょう。
そもそも１台もない場合すらあります。
数百万数千万の売上を皮算用していながら数万円の白ロムすら買うのを渋るのかという疑問は置いといて…。

そういった背景で、いま手元にあるOSも古く、端末自体が不安定な動きをする検証端末でアプリ開発をしても、その端末のクセに引っ張られたものを作りがちになってしまいます。

ですので、開発時はその時点でのOSシェアや解像度のシェアが高い条件を満たしたAndroid Emulatorを中心に、まずはエミュレータで確実に動くアプリの開発を目指しましょう。いまの公式エミュレータはGoogle Play ServiceどころかGoogle Playすらも使えるようになり@<fn>{my-rules-google-play-note}、かなり便利になりました。
積極的に利用すべきだと思います。

ちなみにエミュレータの場合だと、カメラなどハードウェア周りの機能の確認がわりと難しいので、そういった部分は実機に頼らざるを得ません。
逆にそういった機能がメインとなるのに、数万円弱の予算すら渋って検証端末の用意ができない状況下にあるのだとすれば、そのプロジェクトは経験上ほぼ成功することはありません。どこかの勉強会でニッチなネタとして話せるネタができるだけです。

//footnote[my-rules-google-play-note][といっても、インストールできるアプリはあまりありません。]

== 事前に不具合を潰すのではなく、早期に気付いて対応できるしくみを考える

先ほどの項目の延長になりますが、OS依存自体はエミュレータでだいたい解決できるものの、端末依存（たまにキーボードなどのアプリ依存）の問題に関してはどうしても事前に潰すことはできません。
というか、この端末依存の問題を事前にすべてチェックするのはほぼ不可能です。何十という端末を保有し、管理された環境下であることが前提であるためです。やるにしても、テストを専門とする業者への委託を考える必要があるでしょう。

とはいえ、それでもすべての不具合を事前に潰そうと言うことは現実的ではありません。ですので、基本的には現時点でチェック可能な端末でしっかりと動作確認するようにします。
アプリのクラッシュやエラーはクラッシュレポートやアナリティクスを駆使して早期に発見できること、そこから対応をすばやくリリースできる状況を構築することに努めましょう。

== アプリでの提供の必要性を問いてみる

もしすでに、このプロダクトのWeb版やiOS版が提供されているなら話は別です。
プライベートでもなく、特定のBtoB事業でもなく、業務においてAndroidアプリだけを提供するという話であれば、この疑問は投げかけるべきです。

これは前提の話です。
たとえばニュースアプリのようなクライアントアプリの場合、一方のOSで提供するぐらいならWebで満遍なくユーザーに届けられるようにした方が、費用対効果も明らかに高いはずです。
たまたま配属できたエンジニアがAndroidアプリエンジニアしかいないといった、ネガティブな理由で一方のOSでしか体験できないプロダクトを提供したところで、よい結果が生まれるはずがありません。
これは誰にとっても不幸です。

やるのであれば、せめてAndroidアプリとして出す意味があるものを作るべきでしょう。
あなたが現代のAndroidエンジニア界における、奴隷が謎の棒をぐるぐる回す作業を体験したくないのであれば、この部分にぐいぐいとツッコミをかけ、せめてAndrodアプリとして出す価値のあるものを生み出すように努めていきましょう。

== Androidアプリでは標準的な実装を心がけ、無茶な実装はやらない

ここは完全に個人の考えです。
これまでのスマートフォンOSのアップデートは、破壊的な変更が多くあったように感じます。
それゆえに、アプリにOSのアップデート対応で悲鳴をあげるようなことが多々ありました。
その中でも特に多かったのが、OSのアップデートに追従できなかったライブラリを切り捨て、別のライブラリを採用したり、あるいは自作したものに置き換えることでした。

これまでにもさんざん触れてきましたが、継続的に開発を続ける上で手間がかかる要因は防いでおきたいです。
これはOSアップデート対応もまた然りです。

基本的にGoogleが公式で用意したり推奨したやり方が絶対安全という確証はありませんが、それでもほかと比較するとOSアップデート後でもある程度安定した動作ができたり、サポートが継続して続いている場合が多くありました。

こういった理由で、特にアプリ全体に影響のあるようなコアな部分になってくるものほど、公式に合わせた標準的な実装を心がけ、無理やりな実装は仕様の段階で潰すように意識しましょう。