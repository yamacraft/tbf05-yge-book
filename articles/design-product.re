={design-product} yamacraft式プロダクト構成案

//lead{
本章ではこれまでの内容を元に、実際に筆者がプロダクト作成時にベースとしている構成案を紹介します。
//}

== 諸注意

本章の構成案は、主にteam Y.G.E.（プライベート）でプロダクトを作る際に行っていることをベースにしています。
業務レベルになるとそのまま真似する部分も難しいところもあるかと思います。ご了承ください。

== アーキテクチャ（構成）案

筆者がプロダクトを作る上でベースにしている構成案が次の図になります。

//image[product-const][構成案][scale=1.00]{
//}

自身がサーバサイド（＋インフラ方面）の知識が疎いこともあり、サーバ側の処理はある程度ノウハウのあるFirebaseで実装するようにしています。
Firebaseが出るまでは、そもそも諦めてクライアントオンリーのアプリしか考えていなかったので大きな進歩です。

当然、Firebaseだけでやりたいことをすべて実装できるわけではないので、必要な部分は別途AWSやGCPを利用することも検討します。
ただ、なるべくクライアントが複数のアクセス先をもたせるようになると複雑になってしまうので避けたいです。
その場合、この構成のままでいくならCroud Funstionsで経由させるというのも検討すべきかもしれません。

一部のDockerを動かす場所がVPSなのは、単に余っているVPSがあるからで大きな理由はありません。
ただ軽量なDockerコンテナを常駐させる程度であれば、サーバの維持費としてはVPSはお安くなることもあります。
特にいまのところ、ここで動かすDockerはHubotなどの内部の管理ツールを動かす用途ですので、オートスケールの考慮がいらないこともVPSで動かす理由となっています。

== Firebase、クライアントの環境のわけ方

Androidアプリはコードで簡単にdev版、staging版、release版と環境別のアプリを作成できます。

Firebaseに関しては、いまのところdev版とrelease版でそれぞれFirebaseプロジェクトを作成しています。同一プロジェクトから複数作成はしません。
というか、それ以外に手段はないかと思います。@<fn>{footnote-firebase-blaze-note}

//footnote[footnote-firebase-blaze-note][HostingやRealtime DatabaseではBlazeプランで複数作れるようになっていますが、たとえば管理サイト用途だったりスケーリング用途といった形で用意されている印象です。]

クライアントと各Firebaseの環境による接続の組み合わせは、下の図のようにしています。
クライアントの左がAndroidやiOSなどのクライアントアプリ、右がWeb上で公開するフロントエンドとして見てください。

//image[product-access_variants][ビルドとアクセス先の組み合わせ案][scale=1.00]{
//}

Firebaseに完全依存する形になると、staging環境のHostingが誰でもアクセス可能な形で公開できてしまいます（BASIC認証などがかけられないため）。
これに関してはそういうものだと割り切って、最低限metaタグなどで検索エンジンから除外させたりミラーサイトであることを設定して公開してしまいます。
またはstaging版のみ、NetlifyなどのBASIC認証がかけられるホスティングサービスを利用するというやり方もありでしょう。

== 開発の流れについて

開発においても、なるべくコーディングだけに集中できるようにUnitTestやデプロイ周りはCIで自動化させています。
各種デプロイの結果もSlackに返すようにして、集中してコーディングに望める環境を整えていきます。

//image[product-flow][開発はコーディング以外の作業をなるべく自動化させる][scale=1.00]{
//}

開発フローは前章にも書いたように、初期段階ではGitHubフローで、ある程度自動化や機能追加ができあがったころにGit-flowに切り替えて開発を進めています。
自動化によるテストは基本的に各ブランチの更新、デプロイはdevelopとrelease、masterブランチの更新時に行います。
業務の場合、developブランチ更新時はstaging版のみ、それ以外はrelease版も同様にデプロイしていますが、アプリがスタンドアローンで動くようなもの、アナリティクス程度しかつかわないものはrelease版のみをデプロイすることも多いです。

上記の図で唯一のイレギュラーがVPSのDockerの更新で、これだけはいまのところわざわざログインして直接更新をかけています。
これはまったくよいことではないので、いずれこのデプロイも自動化させたいなと思っています。
ただその場合、VPSでやるのはしんどいのでEC2やGCE周りへのデプロイに変わる予定です。

== 運用ツールはチャットbotで運用する

最初の図に掲載していたHubotですが、これは運用ツールとして利用しています。
運用が本当に限られた人で、かつチャットツールの知識をちゃんと持った人達だけで構成されているのであれば、（サービスの内容次第にもよりますが）こうした選択肢はあると思っています。

実際にteam Y.G.E.で公開したYoroOneというサービスでは、データの追加と編集、削除はすべてSlack上のチャットbot経由で行っていました。
他にも業務のプロダクトでもKPI関連の数値チェックをチャットbot上で実装していました。
どちらも特に不便なことはありませんでした。

=== チャットbotで運用するメリット

まず第一に、管理ツールの工数がGUIを考える必要がなくなる分、ぐっと減ります。
他の人はわかりませんが、普段開発時に使うツールはCUIが大半です。
あまりグラフィカルなインタフェースが必要な場面は多くありません。
チャットbotで実装することで、GUI自体の挙動や各種導線などの設計に費やす時間を大きく削ることのできる利点があります。

第二に、いくつかの機能をチャットツールそのもので代用できるメリットがあります。
たとえば運用上で問題が起こった時の要因分析のために、作業ログを残したい場合があります。
これをチャットbotにすることで、操作や操作を行ったユーザーはチャットの記録として残ります。
必要があれば、追加のログを何かチャットと紐づく形で保存するようにしてしまえばよいでしょう。
さらにチャットツール自体の検索機能も利用できます。
ユーザーのアカウント作成やログイン実装も必要ありません。
チャットツールが担保してくれているわけですから、チャットbotではユーザーIDのチェックを入れるだけで済みます。

=== チャットbotで運用するデメリット

そもそもの大前提にあった、チャットツールに慣れていない人には非常に高い敷居になってしまいます。
たとえばSlackであれば、リマインド機能ですら満足に使えない人には厳しいものになりかねません。
そうした人にコマンド権限を与えるだけでも、操作ミスによる運用事故が起こりかねません。

まだチャットbot自体がIT業界でも一般的かというと、割と微妙な状況にあると認識しています。
この選択はある程度の利用者の能力に依存することで成立するものだと、いま現在は認識しておいたほうがよいですしょう。

=== チャットbotにしても変わらない点

たとえば実行確認のために、SlackのInteractive Messageなどを使うなどして部分的に対話処理を挟みたい、といったことが出てくるかもしれません。
そうなってくると、たとえばAWS LambdaやFirebase Cloud Functionなどでやりとり用の処理を追加する必要があります。
このあたりの処理の手間は、場合によってはWebツールで確認処理を作成するよりも手間がかかる場合もあります。

安易にチャットbotでやろうとして機能追加でひいひい言うことがないよう、本当に必要な機能をあらためて洗い出し、管理ツールはなにが適切であるかはしっかり考えるようにしましょう。

== よく使う外部ツール、サービス

ここまでの流れに乗せて、筆者がよくプロダクト内で利用する外部ツールやサービスを簡単に紹介します。

=== Slack

Slackは、これまでにも当たり前のように取り上げているチャットツールです。
単純にCIを含めた各種通知にも使いますし、先ほどのチャットbotの接続先にも使っています。

いちおう無料プランが用意されていますが、接続できるアプリの数に制限があったり、なによりログの検索件数に限度があります。@<fn>{footnote-slack-free-limit}
有料プランだと1ユーザーあたり月960円するので、プライベート開発であれば自分ひとりだけのチャンネルを作って運用するという手もあります。

//footnote[footnote-slack-free-limit][それでも接続できるアプリは10点、検索可能なメッセージは直近10,000件までとなっているので、まったく足りないわけでもありません。]

=== IFTTT

IFTTTは各種サービスのハブとなるサービスです。
範囲が広すぎて簡単に説明できないのですが、主にTwitterとSlackの連携に利用しています。

IFTTTではTwitterの特定の検索結果をフックにSlackに通知できるため、自身のサービスのエゴサ的なものや利用しているサービスの障害通知といったものをSlackの特定チャンネルへ投稿するようにしています。

さらにWebhookにも対応しているのも大きな利点です。
今回は触れませんでしたが、Cloud Functions内で指定のURLをたたくことで、Slackに通知させるといったこともできます。（要Blazeプラン）

=== Trello

Trelloはカンバン形式（タスクボード）でタスクを管理できるツールです。
利点として、無料で複数のユーザーと共有できるタスクボードが作成できます。

あまり利用サービスがまたがりすぎるとページの移動が面倒なため、プライベートでは普段GitHubとZenHubを利用していますが、まれにほかのメンバーとタスクを管理したいことがあり、その時はTrelloを使って管理しています。

アカウントはGoogleアカウントで作成できることもあってか、あまりIT系の開発ツールに疎い知り合いでもすんなりとサインインできる印象があります。
別サービスのアカウント連携機能の重要さを実感します。